# Worst case examples of properties format, file is UTF-8 encoded, 2019-09-21
    ! Another comment line


#--- TOPIC: Delimiters and trimming of key and value
####################################################
         
 key9 more of the key name = value  

 \u000C key10	  The key is trimmed (blanks and keyboard-TABs) a formfeed \u000c is NOT trimmed
#results in: Key is: '' Value is: 'key10	  The key is trimmed (blanks and keyboard-TABs) a formfeed  is NOT trimmed'

lang :    delimiter is a colon

key_without_a_value

      = Empty key

key_with_quotes = "Quotes are meaningless " in a properties file"

"enclosed_key\"   = Enclosing a key has no effect, will be treated 'as is', escaping is ignored
'enclosing_single_quote\' = value
# results in'"enclosed_key"' Value is: 'Enclosing a key has no effect, will be treated 'as is', escaping is ignored'
# results in: ''enclosing_single_quote'' Value is: 'value'

the_value_starts_with_blanks =   \  value, use a backslash in front to protect the trimming
key40 =   \backslash with no effect here

key3  value with = and : char
# store() escapes each : and = char. However this is not necessary for load()

   \r\n test\r\nkey = foo

# results in: Key is: '
#' Value is: 'test
#key = foo'

   \r\ntestkey2\r\n = the key starts and ends with carriage plus return newline

# results in: Key is: '
#testkey2
#' Value is: 'foo2'

 \bkey_starting_with_a_backspace = value\bwith a backspace
# results in: 'bkey_starting_with_a_backspace' Value is: 'valuebwith a backspace'
key_with\0backslashZero = If backslash-zero exists, the backslash is silently ignored
# results in: Key is: 'key_with0backslashZero' Value is: 'If backslash-zero exists, the backslash is silently ignored'

  \akey_starting_with_backslash_a = value\abeep
#results in: Key is: 'akey_starting_with_backslash_a' Value is: 'valueabeep'

key_with\u000C_a_formfeed = value \u000C with a formfeed
# results in: Key is: 'key_with_a_formfeed' Value is: 'value  with a formfeed'



====================results in an empty key
::::::::::::::::::::results in an empty key

key91_with_path_C\:\\temp\\subdir\\ = value
# results in: key='key91_with_path_C:\temp\subdir\' val='value'

key92_with_path_C:\\temp\\subdir\\ = value
# results in: key='key92_with_path_C:\temp\subdir\' val='value'


#--- TOPIC: Path names
######################

logdir = C:\\temp\\test\\subdir1\\
logfile = C:\\temp\\test.log

#--- TOPIC: Continuation lines, wrapped lines
#############################################

ContLines =     This text contains \
         two continuation \
           lines

wrapped_k\
   ey = more stuff

Wrapped_path_name = C:\\temp\\test\\subdir5\\\
    foo.txt

# the following key value is NOT interpreted as cont. line because of the two backslashes
dirsep = \\



#--- TOPIC: Allowed chars in a keyname - but not recommended
############################################################
# Properties.load() accepts blank \t = : and \ characters in a keyname

  key_with_tab\t,blank\ ,equal\=,backslash\\_and_colon\:characters = not recommended keyname

# results in: Key is: 'key_with_tab	,blank ,equal=,backslash\_and_colon:characters' Value is: 'not recommended keyname'

key456 with un-escaped blanks terminates the keyname = value
key457\ with\ escaped\ blanks\ is\ allowed = value
key458_with_\r_return = value\rmore
key459_xxx_\\r_return = the key has a backslash backslash r
# result: Key is: 'key459_xxx_\r_return' Value is: 'value\rmore'

key94_ends_with_backslash-t\t   = The ending backslash-t of the key is NOT trimmed


key\n15 = Newline(s) in a keyname are not recommended, line 1\nline 2\n\
      last line

   \ key_starting_with_one_blank = value
   \ \ key_starting_with_two_blanks = value


key_with_one_\_backslash = the backslash has no effect in this case
key_with_two_\\_backslashes = results in one backslash

   \\_key_starts_with_backslash = not recommended
   \\\ key_starts_with_backslash_and_a_blank = not recommended


#--- TOPIC: TABs in values
##########################

# ein keyboard TAB im keynamen führt zum ende des keynamens und wird getrimmt
# auch am anfang eines values, ein backslash-t wird NICHT getrimmt 
# ein backslash-t im keynamen wird immer als Nutzzeichen angesehen und beim lesen expandiert
# Bei store wird ein keyboard-Tab als \t  und ein \t als \t rausgeschrieben

value_with_tabs1 =	Keyboard-Tab at the begining, another keyboard-Tab	,now backslash-t\t and at the end backslash-t\t	

#stored as: value_with_tabs1=Keyboard-Tab at the begining, another keyboard-Tab\t,now backslash-t\t and at the end backslash-t\t\t

value_with_tabs2 = \t tabs in a value can be written as backslash-t or	the TAB-key\t
#stored as: value_with_tabs2=\t tabs in a value can be written as backslash-t or\tthe TAB-key\t

	key_starts_with_keyboard_tab_and\tbackslash-t	 = value
#results in: Key is: 'key_with_keyboard_tab_and	backslash-t' Value is: 'value'
#stored as: key_starts_with_keyboard_tab_and\tbackslash-t=value

#--- TOPIC: Mutated vowels and Unicode char.s in key and value
##############################################################

unicode_in_value1 = A Smiley: \u263A written as escaped sequence
unicode_in_value2 = umlaut ä or as unicode \u00e4 char
unicode_in_value3 = This is a \uD83D\uDC1D honey bee (codepoint 1F41D beyond BMP)

key78_with_Ö_char = The Oe in key is a keyboard char
key79_with_\u00D6_char = The Oe in key is in unicode \u00D6

key80_with_unicodes_\u263A_smiley_and_Ohm_\u2126 = value more stuff





#------ the end

    